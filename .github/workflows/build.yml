---
name: build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  config:
    name: Get config
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.build-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v2

      - name: Get strategy matrix
        id: build-matrix
        # https://stackoverflow.com/a/61919791
        run: |
          content=`cat ./.CI/build_matrix.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=matrix::$content"

  build:
    name: Build ${{ matrix.config.name }}
    needs: config
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          aqtversion: '==1.1.1'
          extra: --external 7z
          version: ${{ matrix.config.qt_version }}

      - name: Windows dependencies
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja -- version
          cmake --version

      - name: Ubuntu dependencies
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            ninja-build \
            cmake
          ninja --version
          cmake --version
          gcc --version

      - name: macOS dependencies
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version

      - name: CMake generate
        shell: bash
        run: |
          mkdir instdir
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_INSTALL_PREFIX=instdir \
            -S . \
            -B build \
            -G "${{ matrix.config.generators }}"

      - name: CMake build
        shell: bash
        run: |
          cmake \
            --build build \
            --config ${{ matrix.config.build_type }}

      - name: CMake install
        shell: bash
        run: |
          cmake --install build --strip

      - name: Pack artifact
        shell: bash
        working-directory: instdir
        run: |
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./${{ matrix.config.artifact }}

  create-release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Set environment variables for release
        run: |
          echo "tag_name=nightly-build" >> $GITHUB_ENV
          echo "release_name=Nightly Release" >> $GITHUB_ENV

      - name: Delete previous release and tag
        uses: actions/github-script@v5.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const release = await github.rest.repos.getReleaseByTag({
                owner: owner,
                repo: repo,
                tag: process.env.tag_name
              })
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.data.id
              })
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `tags/${process.env.tag_name}`
              })
            } catch (err) {
              core.error(`Error deleting release or tag: ${err}`)
            }

      - name: Create new tag and release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: ${{ env.release_name }}
          draft: false
          prerelease: true

  upload-release-assets:
    name: Upload ${{ matrix.config.name }}
    needs: [config, create-release]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.build_matrix) }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: ${{ matrix.config.artifact }}
          path: ./${{ matrix.config.os }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.config.os }}/${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: ${{ matrix.config.asset_mimetype }}
